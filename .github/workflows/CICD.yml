name: Dockerizing Flask app / pushing to DockerHub / running AzCLI to AKS

on:
  push:
    branches:
      - main

# First job is to dockerize the app and push to Docker Hub

jobs:
  build:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      # Update GitHub Actions runner
      #- name: Update GitHub runner
      #  run: sudo apt-get update -y && sudo apt-get upgrade -y

      # Login to Docker Hub using authentication token
      - name: Login to Docker Hub
        run: echo "${{ secrets.DOCKER_TOKEN }}" | docker login --username "${{ secrets.DOCKER_USERNAME }}" --password-stdin

      # Build Docker image and push
      #- name: Build Docker image and push
      #  run: docker buildx create --use && docker buildx build --platform linux/arm64,linux/amd64 --push -t cyberprince/flaskverapp:v1 .

      - name: Logging to Azure Resource Manager through CLI
        run: az login --service-principal -u ${{ secrets.CLIENT_ID }} -p ${{ secrets.CLIENT_SECRET }} --tenant ${{ secrets.TENANT_ID }}

      - name: Creating Azure resources RG + AKS
        run: |
          az group create --location westeurope --name RG-AzCLI-AKS
          az aks create \
            --resource-group RG-AzCLI-AKS \
            --name CLI-AKS \
            --node-count 1 \
            --node-vm-size Standard_F2s_v2 \
            --enable-addons monitoring \
            --generate-ssh-keys
          az aks get-credentials --admin --name CLI-AKS --resource-group RG-AzCLI-AKS
          kubectl create namespace dev
          kubectl -n dev create deployment flaskapp --image=cyberprince/flaskverapp:v1
          kubectl -n dev expose deployment flaskapp --type=LoadBalancer --port=5050 --target-port=5050






# Deploying DockerHub image to run on Azure Kubernetes Service

#  deploy:
#    needs: build
#    runs-on: ubuntu-latest

#    steps:
#      - name: Checkout code
#        uses: actions/checkout@v4

      #- name: Update GitHub runner
      #  run: sudo apt-get update -y && sudo apt-get upgrade -y










#saved info here
#${{vars.RG_LOCATION}} = westeurope
#${{vars.VM_NAME}} = Standard_F2s_v2